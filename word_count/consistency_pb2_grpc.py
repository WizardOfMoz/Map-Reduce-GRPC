# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import consistency_pb2 as consistency__pb2


class Master_MapStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getInputData = channel.unary_unary(
                '/consistency.Master_Map/getInputData',
                request_serializer=consistency__pb2.MapDataRequest.SerializeToString,
                response_deserializer=consistency__pb2.InputData.FromString,
                )
        self.Register = channel.unary_unary(
                '/consistency.Master_Map/Register',
                request_serializer=consistency__pb2.Map.SerializeToString,
                response_deserializer=consistency__pb2.MapRegResponse.FromString,
                )
        self.getR = channel.unary_unary(
                '/consistency.Master_Map/getR',
                request_serializer=consistency__pb2.Void.SerializeToString,
                response_deserializer=consistency__pb2.RValue.FromString,
                )


class Master_MapServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getInputData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Master_MapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getInputData': grpc.unary_unary_rpc_method_handler(
                    servicer.getInputData,
                    request_deserializer=consistency__pb2.MapDataRequest.FromString,
                    response_serializer=consistency__pb2.InputData.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=consistency__pb2.Map.FromString,
                    response_serializer=consistency__pb2.MapRegResponse.SerializeToString,
            ),
            'getR': grpc.unary_unary_rpc_method_handler(
                    servicer.getR,
                    request_deserializer=consistency__pb2.Void.FromString,
                    response_serializer=consistency__pb2.RValue.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'consistency.Master_Map', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master_Map(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getInputData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Master_Map/getInputData',
            consistency__pb2.MapDataRequest.SerializeToString,
            consistency__pb2.InputData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Master_Map/Register',
            consistency__pb2.Map.SerializeToString,
            consistency__pb2.MapRegResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Master_Map/getR',
            consistency__pb2.Void.SerializeToString,
            consistency__pb2.RValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Map_ReduceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getIntermediateData = channel.unary_unary(
                '/consistency.Map_Reduce/getIntermediateData',
                request_serializer=consistency__pb2.ReduceDataRequest.SerializeToString,
                response_deserializer=consistency__pb2.IntermediateData.FromString,
                )


class Map_ReduceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getIntermediateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Map_ReduceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getIntermediateData': grpc.unary_unary_rpc_method_handler(
                    servicer.getIntermediateData,
                    request_deserializer=consistency__pb2.ReduceDataRequest.FromString,
                    response_serializer=consistency__pb2.IntermediateData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'consistency.Map_Reduce', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Map_Reduce(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getIntermediateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Map_Reduce/getIntermediateData',
            consistency__pb2.ReduceDataRequest.SerializeToString,
            consistency__pb2.IntermediateData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Master_ReduceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/consistency.Master_Reduce/Register',
                request_serializer=consistency__pb2.Reduce.SerializeToString,
                response_deserializer=consistency__pb2.ReduceRegResponse.FromString,
                )
        self.getRegisteredMaps = channel.unary_stream(
                '/consistency.Master_Reduce/getRegisteredMaps',
                request_serializer=consistency__pb2.Void.SerializeToString,
                response_deserializer=consistency__pb2.Map.FromString,
                )


class Master_ReduceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRegisteredMaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Master_ReduceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=consistency__pb2.Reduce.FromString,
                    response_serializer=consistency__pb2.ReduceRegResponse.SerializeToString,
            ),
            'getRegisteredMaps': grpc.unary_stream_rpc_method_handler(
                    servicer.getRegisteredMaps,
                    request_deserializer=consistency__pb2.Void.FromString,
                    response_serializer=consistency__pb2.Map.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'consistency.Master_Reduce', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master_Reduce(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Master_Reduce/Register',
            consistency__pb2.Reduce.SerializeToString,
            consistency__pb2.ReduceRegResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRegisteredMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/consistency.Master_Reduce/getRegisteredMaps',
            consistency__pb2.Void.SerializeToString,
            consistency__pb2.Map.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Reduce_MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getFinalData = channel.unary_unary(
                '/consistency.Reduce_Master/getFinalData',
                request_serializer=consistency__pb2.Void.SerializeToString,
                response_deserializer=consistency__pb2.FinalData.FromString,
                )


class Reduce_MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getFinalData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Reduce_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getFinalData': grpc.unary_unary_rpc_method_handler(
                    servicer.getFinalData,
                    request_deserializer=consistency__pb2.Void.FromString,
                    response_serializer=consistency__pb2.FinalData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'consistency.Reduce_Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reduce_Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getFinalData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/consistency.Reduce_Master/getFinalData',
            consistency__pb2.Void.SerializeToString,
            consistency__pb2.FinalData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
